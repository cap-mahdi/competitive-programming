Power O(b)
int binpow(int a, int b) {
    int res = 1;
    while (b > 0) {
        if (b & 1) res *= a;
        a *= a;
        b >>= 1;
    }
    return res;
}

Multiply O(b)
long long int multiply(long long int a,long long int b,long long int c){
    long long int res = 0;
    while(b){
        if(b & 1) res = (res + a) % c;
        a = (a*2) % c;
        b >>= 1;
    }
    return res;
}

Matrix
class Mat {
public:
    int n, m;
    vector<vector<int>> mat;
    Mat(int n, int m){
        this->n = n;
        this->m = m;
        mat.resize(n, vector<int>(m, 0));
    }
    void identity(){
        for(int i = 0; i < n; i++){
            mat[i][i] = 1;
        }
    }

    void print(){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                cout << mat[i][j] << " ";
            }
            cout << endl;
        }
    }

    Mat operator*(const Mat &other){
        Mat res(n, other.m);
        for(int i = 0; i < n; i++){
            for(int j = 0; j < other.m; j++){
                for(int k = 0; k < m; k++){
                    res.mat[i][j] += mat[i][k] * other.mat[k][j];
                }
            }
        }
        return res;
    }

    Mat operator^(int b){
        Mat res(n, m);
        res.identity();
        Mat a = *this;
        while(b > 0){
            if(b & 1) res = res * a;
            a = a * a;
            b >>= 1;
        }
        return res;
    }

    Mat operator+(const Mat &other){
        Mat res(n, m);
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                res.mat[i][j] = mat[i][j] + other.mat[i][j];
            }
        }
        return res;
    }
};

Nth Fibonnaci // we can appply same logic to Recurring series
int Fibonnaci(int n){
    Mat a(2, 2);
    a.mat[0][0] = 1;
    a.mat[0][1] = 1;
    a.mat[1][0] = 1;
    n-=2;
    a = a^n;
    return a.mat[0][0] + a.mat[0][1];
}


Sum Of Recurring series
void solve(){
    int k;
    cin>>k;
    int b[k],c[k];
    for(int i = 0; i < k; i++){
        cin >> b[i];
    }
    for(int i = 0; i < k; i++){
        cin >> c[i];
    }
    int m,n,p;
    cin>>m>>n>>p;
    mod = p;
    Mat T(k+1,k+1);
    for(int i = 1;i<k+1;i++){
        T.mat[0][i]=c[i-1]%p;
        T.mat[1][i]=c[i-1]%p;
    }
    T.mat[0][0]=1;
    for(int i=2;i<k+1;i++){
        T.mat[i][i-1] = 1;
    }
    Mat F(k+1,1);
    for(int i=k;i>=1;i--){
        F.mat[i][0]=b[k-i]%p;
        F.mat[0][0]= (F.mat[0][0]+F.mat[i][0])%p;
    }

    int sum1=0,sum2=0;

    if(m<=k){
        for(int i=0;i<m-1;i++){
            sum1= (sum1+b[i]%p)%p;
        }
    }else{
        Mat Temp = T;
        Temp = T^(m-1-k);
        Temp = Temp*F;
        sum1 = Temp.mat[0][0];
    }
    if(n<=k){
        for(int i=0;i<n;i++){
            sum2= (sum2+b[i]%p)%p;
        }
    }else{
        Mat Temp = T;
        Temp = T^(n-k);
        Temp = Temp*F;
        sum2 = Temp.mat[0][0];
    }

    cout<<(sum2-sum1 )%mod<<"\n";
    
};