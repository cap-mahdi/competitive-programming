//binary search
int binarySearch(vector<int> v,int key){
    //find the index of the key in the sorted array
    //O(logn)
    int n = v.size();
    int start = 0;
    int end = n-1;
    while(start<=end){
        int mid = (start+end)/2;
        if(v[mid]==key){
            return mid;
        }
        else if(v[mid]>key){
            end = mid-1;
        }
        else{
            start = mid+1;
        }
    }
    return -1;
}

//occurence
int lowerBound(vector<int> v,int key){
    //lower bound is the first index where the key is present in a sorted array
    //O(logn)
    int n = v.size();
    int start = 0;
    int end = n-1;
    int ans = -1;
    while(start<=end){
        int mid = (start+end)/2;
        if(v[mid]==key){
            ans = mid;
            end = mid-1;
        }
        else if(v[mid]>key){
            end = mid-1;
        }
        else{
            start = mid+1;
        }
    }
    return ans;
}

int upperBound(vector<int> v,int key){
    //upper bound is the last index where the key is present in a sorted array
    //O(logn)
    int n = v.size();
    int start = 0;
    int end = n-1;
    int ans = -1;
    while(start<=end){
        int mid = (start+end)/2;
        if(v[mid]==key){
            ans = mid;
            start = mid+1;
        }
        else if(v[mid]>key){
            end = mid-1;
        }
        else{
            start = mid+1;
        }
    }
    return ans;
}

int occurence(vector<int> v,int key){
    //find the number of occurences of the key in the sorted array
    //O(logn)  
    int lower = lowerBound(v,key);
    int upper = upperBound(v,key);
    if(lower==-1) return 0;
    return upper-lower+1;
}


//USE OF BINARY SEARCH WITH SEARCH SPACE THAT IS MONOTONICALLY INCREASING OR DECREASING
//angry birds
bool canPlaceBirds(vector<int> v,int min_distance,int birds){
    //can we place birds with minimum distance min_distance
    //O(n)


    int n = v.size();
    int birdsPlaced = 1;
    int lastPlaced = v[0];
    for(int i=1;i<n;i++){
        if(v[i]-lastPlaced>=min_distance){
            birdsPlaced++;
            lastPlaced = v[i];
        }
        if(birdsPlaced==birds){
            return true;
        }
    }
    return false;
}

int largestMinimumDistance(vector<int> v,int birds){
    //find the largest minimum distance between any two birds
    //O(nlogmax-min)

    sort(v.begin(),v.end());


    int n = v.size();
    int start = 0;
    int end = v[n-1]-v[0];
    int ans = -1;
    while(start<=end){
        int mid = (start+end)/2;
        int birdsPlaced = 1;
        int lastPlaced = v[0];
        if(canPlaceBirds(v,mid,birds)){
            ans = mid;
            start = mid+1;
        }
        else{
            end = mid-1;
        }

    }
    return ans;
}

//game of greed
bool canHaveKPartitions(vector<int> coins,int friends,int min_sum){
    //can we have k partitions such that each partition has sum<=min_sum
    //O(n)
    int n = coins.size();
    int sum = 0;
    int count = 0;
    for(int i=0;i<n;i++){
        sum+=coins[i];
        if(sum>=min_sum){
            count++;
            sum = coins[i];
        }
    }
    return count>=friends;
}


int maximizeMinmumPartitions(vector<int> coins,int friends){
    //find the maximum value of the minimum partition 
    //O(nlog(sum(coins)-min(coins)))
    int n = coins.size();

    int start = coins[0];
    int end=0;

    for(int i=0;i<n;i++){
        start = min(start,coins[i]);
        end += coins[i];
    }

    int ans = 0;
    while(start<=end){
        int mid = (start+end)/2;
        
        if(canHaveKPartitions(coins,friends,mid)){
            ans = mid;
            start = mid+1;
        }
        else{
            end = mid-1;
        }
    }
    return ans;
}





