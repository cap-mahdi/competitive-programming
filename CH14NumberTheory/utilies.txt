//********Modulo arithmatic************

const int P = 1e9 + 7 ;//it shoud be prime number because we are using fermat's little theorem whichi is only applicable for prime numbers
//the theoreme is : a^(p-1) = 1 (mod p) where p is prime number and a is any number so  we can write a^(p-2) = a^(-1) (mod p) which is the inverse of a
const int N = 1e5 ;
int fact[N];

int addmod(int a, int b){
    return (a + b) % P;
}

int submod(int a, int b){
    return (a - b + P) % P;// to make sure the remainder is in the range [0, P-1]
}

int multiplymod(int a, int b){
    return (a * b) % P;//a and b must be long long int because at worst case a*b can be 1e18 which cannot be stored in int
}

int powermod(int a, int b){
    //it determines a^b (mod p)
    //fast exponentiation in O(log(b))
    int res = 1;
    while(b){
        if(b & 1){
            res = multiplymod(res, a);
        }
        a = multiplymod(a, a);
        b >>= 1;
    }
    return res;
}

int modInverse(int a){
    //it determines  a^(-1) (mod p)
    ///O(log(P))
    // if P is prime then you can directly find the modulo inverse of a using fermat's little theorem
    //using fermat's little theorem
    return powermod(a, P - 2);
}

int divideMod(int a, int b){
    // it determines a/b (mod p)
    //O(log(P))
    //a/b = a * (b^(-1)) (mod p) = a * (b^(p-2)) (mod p)
    return multiplymod(a, modInverse(b));
}

int calculateFactorialMod(){
    // it determines the factorial of all numbers from 0 to N (mod p)
    //O(N) 
    fact[0] = 1;
    for(int i = 1; i <= N; i++){
        fact[i] = multiplymod(fact[i - 1], i);
    }
}

int nCr(int n, int r){
    //it determines nCr (mod p)
    //O(log(P))
    //nCr = n! / (r! * (n - r)!)
    //nCr = n! * (r! * (n - r)!)^(-1) (mod p)
    //nCr = n! * (r! * (n - r)!)^(p - 2) (mod p)
    int numerator = fact[n];
    int denominator = multiplymod(fact[r], fact[n - r]);
    return multiplymod(numerator, modInverse(denominator));
}

int nPr(int n, int r){
    //it determines nPr (mod p)
    //O(log(P))
    //nPr = n! / (n - r)! because nPr = n * (n - 1) * (n - 2) * ... * (n - r + 1)
    //nPr = n! * (n - r)!^(-1) (mod p)
    //nPr = n! * (n - r)!^(p - 2) (mod p)
    int numerator = fact[n];
    int denominator = fact[n - r];
    return multiplymod(numerator, modInverse(denominator));
}


//*********Chinese Remainder Theorem**********
//it is used to find the number x such that x % p[i] = r[i] for all i such that p[i] and p[j] are coprime for all i != j and return the smallest positive value of x
const int mod = 1e9 + 7;
int multiplymod(int a, int b){
    return (a * b) % mod ;//a and b must be long long int because at worst case a*b can be 1e18 which cannot be stored in int
}


int powermod(int a, int b){
    //fast exponentiation in O(log(b))
    int res = 1;
    while(b){
        if(b & 1){
            res = multiplymod(res, a);
        }
        a = multiplymod(a, a);
        b >>= 1;
    }
    return res;
}

int modInverse(int a, int p){
    ///O(log(P))
    // if P is prime then you can directly find the modulo inverse of a using fermat's little theorem
    //using fermat's little theorem
    return powermod(a, p-2);
}
void ChineseRemainderTheorem(int * primes ,int * remainders,int n){
    int N = 1;
    for(int i = 0; i < n; i++){
        N *= primes[i];
    }
    int result = 0;
    for(int i = 0; i < n; i++){
        int Ni = (N / primes[i]);
        int x = multiplymod(remainders[i], modInverse(Ni % primes[i], primes[i]));
        result += multiplymod(x, Ni);
    }
    cout << result % N << " + k*" << N  << endl;

}



//*********Euler's Totient Function**********
//it is used to find the number of numbers from 1 to n which are coprime with n
//it is also used to find the number of numbers from 1 to n such that gcd(i,n) = g
const int N = 1e6+5;

int phi[N];
void calcul_totient(){
    //calculating phi for all numbers from 1 to N
    //Complexity: O(NloglogN)
    iota(phi,phi+N,0);
    for(int i=2;i<N;i++){
        if(phi[i]==i){
            for(int j=i;j<N;j+=i){
                phi[j] -= phi[j]/i;
            }
        }
    }
}

int count_numbers_with_gcd(int n,int g){
    if(n%g!=0) return 0;
    return phi[n/g];
}   

