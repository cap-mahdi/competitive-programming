BITS OPERATIONS
int getIthBit(int n, int i){
return (n & (1 << i)) != 0;
}

void setIthBit(int &n, int i){
n = n | (1 << i);
}

void clearIthBit(int &n, int i){
n = n & (~(1 << i));
}

void updateIthBit(int &n, int i, int v){
clearIthBit(n, i);
n = n | (v << i);
}

void clearLastIBits(int &n, int i){
int mask = (-1 << i);
n=  n & mask;
}

void clearRangeItoJ(int &n, int i, int j){
int a = (-1 << (j + 1));
int b = (1 << i) - 1;
int mask = a | b;
n = n & mask;
}

void replaceBits(int &n, int m, int i, int j){
//replacee i to j bits of n with m
clearRangeItoJ(n, i, j);
n = n | (m << i);
}
int checkPowerOf2(int n){ 
return (n & (n - 1)) == 0;
}
int countSetBits(int n){
//complexity: O(no. of set bits)
int count = 0;
while(n){
//remove last set bit
n = n & (n - 1);
count++;
}
return count;

//     //complexity: O(logn + 1) 
// int count = 0;
// while(n){
//     count += (n & 1);
//     n = n >> 1;
// }
// return count;
}

long long convertToBinary(int n){
long long ans = 0;
long long p = 1;
while(n){
ans += (n & 1) * p;
p *= 10;
n = n >> 1;
}
return ans;
}


UNIQUE NUMBER
IN 2N+1 array
int uniqueNmber(int arr[], int n){
    int ans = 0;
    for(int i=0;i<n;i++){
        ans = ans ^ arr[i];
    }
    return ans;
}

IN 2N+2 array
int*  uniqueNumber(int arr[], int n){
    int xor_cumulative = 0;
    for(int i=0;i<n;i++){
        xor_cumulative = xor_cumulative ^ arr[i];
    }
    
    int temp = xor_cumulative;
    int pos = 0;
    while((temp & 1) != 1){

        pos++;
        temp = temp >> 1;
    }

    int mask = (1 << pos);
    int firstNo = 0;
    for(int i=0;i<n;i++){
        if((arr[i] & mask) != 0){
            firstNo = firstNo ^ arr[i];
        }
    }
    int secondNo = xor_cumulative ^ firstNo;
    return new int[2]{firstNo, secondNo};
}   


IN P*N+1
void updateArray(vector <int> &sumArray, int n){
    int i=0;
    while(n>0){
        sumArray[i] += (n&1);
        i++;
        n = n>>1;
    }
}
int  decimalNumber(vector <int> sumArray){
    int ans = 0;
    for(int i=0;i<64;i++){
        ans += (sumArray[i] * (1<<i));
    }
    return ans;
}

int uniqueNumber(int arr[], int n){
    vector <int> sumArray(64, 0);
    for(int i=0;i<n;i++){
        updateArray(sumArray,arr[i]);
    }
    for(int i=0;i<64;i++){
        sumArray[i] = sumArray[i]%3;//p
    }
    return decimalNumber(sumArray);
}

TravellingSalesmanProblem
//DP approach + bitMasking
int tsp(vector<vector <int> > dist , int setOfCities,int  city, int n, vector<vector<int>> &dp){
    if(setOfCities == (1<<n) - 1)
        return dist[city][0];
    
    if(dp[setOfCities][city] != -1)
        return dp[setOfCities][city];
    
    int ans = INT_MAX;
    for(int choice=0;choice<n;choice++){
        if( ( setOfCities & (1<<choice) ) == 0){

            int subProb = dist[city][choice] + tsp(dist,setOfCities | (1<<choice),choice,n,dp);
            ans = min(ans,subProb);
            
        }
    }
    return dp[setOfCities][city] = ans;
    
}