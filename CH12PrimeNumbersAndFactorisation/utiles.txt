/*
    determine if a number is prime
    complexity: O(sqrt(n))
    used if you have to check if a number is prime or not for a single time
*/
bool isPrime(int n){
    if(n==1){
        return false;
    }
    if(n==2){
        return true;
    }
    if(n%2==0){
        return false;
    }
    for(int i=3;i*i<=n;i+=2){
        if(n%i==0){
            return false;
        }
    }
    return true;
}


/*
    factorise a number into its prime factors
    complexity: O(sqrt(n))
    used if you have to factorise a number for a single time
*/
void factoriseOpt(int n){
    for(int i=2;i*i<=n;i++){
        if(n%i==0){
            int count =0;
            while(n%i == 0){
                count++;
                n/=i;
            }
            cout<<i<<"^"<<count<<",";
        }
    }
    if(n!=1){
         cout<<n<<"^"<<1;
    }
    cout<<endl;
}


    // determine if a number is prime
    // complexity: O(sqrt(n))
    // used if you have to check if a number is prime or not for multiple times (test cases)
    // precomputation: O(nloglogn)
    // space complexity: O(n)

void primeSieve(vector<int> &sieve){
    sieve[2]=1; 
    for(int i=3;i<=N;i+=2){
        sieve[i]=1;
    }
    for(int i=3; i<=N;i++){
        if(sieve[i]){
            
            for(int j=i*i;j<=N;j+=i){
                sieve[j]=0;
            }
        }
    }
}


    // factorise a number into its prime factors
    // used if you have to factorise a number for multiple times (test cases)
    // precomputation: O(nloglogn)
    // the factorisation of a number can be done in O(logn) time
    // space complexity: O(n)

vector<int> sieve(N+1,0);

void primeSieveFactorisation(){
    for(int i=2;i<=N;i+=2){
        sieve[i]=2;
    }
    for(int i=3;i<=N;i++){
        if(sieve[i]==0){
            sieve[i]=i;
            for(int j=i*i;j<=N;j+=i){
                if(sieve[j]==0)
                    sieve[j]=i;
            }
        }
    }
}

void factoriseSieve(int n){
    while(n!=1){
        int count =0;
        int prime = sieve[n];
        while(n%prime == 0 ){
            count++;
            n/=prime;
        }
        cout<<prime<<"^"<<count<<",";
    }
}


    // segmented sieve
    // used to find prime numbers in a range
    // complexity: O(nloglogn + (n-m+1)*sqrt(n))
    // space complexity: O(sqrt(n))

vector<int> sieve(N+1,0);
vector<int> primes;
void primeSieve(){
    sieve[2]=1; 
    primes.push_back(2);

    for(int i=3;i<=N;i+=2){
        sieve[i]=1;
    }
    for(int i=3; i<=N;i++){
        if(sieve[i]){
            primes.push_back(i);
            for(int j=i*i;j<=N;j+=i){
                sieve[j]=0;
            }
        }
    }
}


void segmentedSieve(){
    int n,m;
    cin>>m>>n;

    vector<int>segment(n-m+1,0);

    for(int p : primes){
        if(p*p>n){
            break;
        }

        int start =  (m/p) * p ;

        if(p>=m){
            start = 2*p;
        }
        for(int j=start;j<=n;j = j + p){
            if(j<m){
                continue;
            }
            segment[j-m]=1;
        }

        

    }
    for(int j=m;j<=n;j++){
            if(segment[j-m]==0){
                cout<<j<<"\n";
            }
        }
        cout<<"\n";
}